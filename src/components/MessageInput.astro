---
import Button from './Button.astro';
import { actions, getActionProps } from 'astro:actions';

interface Props {
  userId: string;
}

const { userId } = Astro.props;
const submitMessageResult = Astro.getActionResult(actions.submitMessage);
---

<form
  id="send-message"
  chat-data="chat"
  method="post"
  class="flex flex-col gap-2 p-6"
  chat-on:submit.prevent="sendMessage"
>
  <input {...getActionProps(actions.submitMessage)} />
  <input
    autocomplete="off"
    required
    minlength={1}
    name="content"
    class="italic outline-none"
    placeholder="Type a message..."
  />
  <input type="hidden" name="userId" value={userId} />
  <Button
    id="submit-btn"
    type="submit"
    chat-bind:disabled="isSubmitting"
    chat-text="submitButtonText">Send</Button
  >
</form>
<div id="send-message-error" class="px-6 pb-6 text-end text-red-600 h-3">
  {submitMessageResult?.error?.message}
</div>

<script>
  import Alpine from 'alpinejs';
  import { actions, isInputError } from 'astro:actions';

  const messageContainer = '#message-box';
  const errorContainer = '#send-message-error';

  Alpine.prefix('chat-');
  Alpine.data('chat', () => ({
    isSubmitting: false,
    submitButtonText: 'Send',
    async sendMessage(e: Event) {
      const form = e.currentTarget;
      this.isSubmitting = true;
      this.submitButtonText = 'Sending...';

      if (form instanceof HTMLFormElement) {
        const formValues = new FormData(form);
        const { data, error } = await actions.submitMessage.safe(formValues);
        if (data) {
          htmx.swap(messageContainer, data, { swapStyle: 'beforeend' });
          htmx.swap(errorContainer, '', { swapStyle: 'innerHTML' });
          form.reset();
        }

        if (error || isInputError(error)) {
          htmx.swap(errorContainer, error.message, { swapStyle: 'innerHTML' });
        }
      }

      this.isSubmitting = false;
      this.submitButtonText = 'Send';
    },
  }));

  Alpine.start();
</script>
