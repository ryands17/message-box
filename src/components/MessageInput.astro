---
import Button from './Button.astro';
import { actions, getActionProps } from 'astro:actions';

interface Props {
  userId: string;
}

const { userId } = Astro.props;
const submitMessageResult = Astro.getActionResult(actions.submitMessage);
---

<form id="send-message" method="post" class="flex flex-col gap-2 p-6">
  <input {...getActionProps(actions.submitMessage)} />
  <input
    autocomplete="off"
    required
    minlength={1}
    name="content"
    class="italic outline-none"
    placeholder="Type a message..."
  />
  <input type="hidden" name="userId" value={userId} />
  <Button id="submit-btn" type="submit">Send</Button>
</form>
<div id="send-message-error" class="px-6 pb-10 text-end text-red-600 h-4">
  {submitMessageResult?.error?.message}
</div>

<script>
  import { actions, isInputError } from 'astro:actions';

  const messageContainer = '#message-box';
  const errorContainer = '#send-message-error';

  const form = document.querySelector<HTMLFormElement>('#send-message')!;
  const submitButton =
    document.querySelector<HTMLButtonElement>('#submit-btn')!;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';

    const formValues = new FormData(form);
    const { data, error } = await actions.submitMessage.safe(formValues);

    if (data) {
      htmx.swap(messageContainer, data, { swapStyle: 'beforeend' });
      htmx.swap(errorContainer, '', { swapStyle: 'innerHTML' });
      form.reset();
    }

    if (error || isInputError(error)) {
      htmx.swap(errorContainer, error.message, { swapStyle: 'innerHTML' });
    }

    submitButton.disabled = false;
    submitButton.textContent = 'Send';
  });
</script>
